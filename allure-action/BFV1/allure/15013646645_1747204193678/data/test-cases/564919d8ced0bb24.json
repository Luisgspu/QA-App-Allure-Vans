{"uid":"564919d8ced0bb24","name":"test_run[test_case20]","fullName":"QAAppAllure#test_run","historyId":"9d569c892009b5da264b6d5628ecd2aa","time":{"start":1747204086489,"stop":1747204094766,"duration":8277},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: Failed to accept cookies.","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bec67e999f8db3cc36eea073b86c69e2\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'M447-fl2'\nmodel_name = 'MIXTO', body_type = 'VITO', attempt = 1\nurls = {'BODY_TYPE': 'VITO?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurato... 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'MODEL_CODE': 'M447-fl2?internal_test=true', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f21438b2f90>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f21420d3930>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"\uD83C\uDF0D Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n>               driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n\nQAAppAllure.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f21420d2cf0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Cannot read properties of ...\\\\n#17 0x55c7b8c835a6 \\\\u003Cunknown>\\\\n#18 0x7f221649caa4 \\\\u003Cunknown>\\\\n#19 0x7f2216529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'click')\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55c7b8c8475a <unknown>\nE       #1 0x55c7b87374b0 <unknown>\nE       #2 0x55c7b873e0b6 <unknown>\nE       #3 0x55c7b8740c07 <unknown>\nE       #4 0x55c7b87d561e <unknown>\nE       #5 0x55c7b87ae592 <unknown>\nE       #6 0x55c7b87d45e0 <unknown>\nE       #7 0x55c7b87ae363 <unknown>\nE       #8 0x55c7b877ad63 <unknown>\nE       #9 0x55c7b877b9c1 <unknown>\nE       #10 0x55c7b8c49a6b <unknown>\nE       #11 0x55c7b8c4d951 <unknown>\nE       #12 0x55c7b8c31b62 <unknown>\nE       #13 0x55c7b8c4e4c4 <unknown>\nE       #14 0x55c7b8c1613f <unknown>\nE       #15 0x55c7b8c726f8 <unknown>\nE       #16 0x55c7b8c728d6 <unknown>\nE       #17 0x55c7b8c835a6 <unknown>\nE       #18 0x7f221649caa4 <unknown>\nE       #19 0x7f2216529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_case = {'body_type': 'VITO', 'market_code': 'DE/de', 'model_code': 'M447-fl2', 'model_name': 'MIXTO', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:335: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bec67e999f8db3cc36eea073b86c69e2\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'M447-fl2'\nmodel_name = 'MIXTO', body_type = 'VITO', attempt = 1\nurls = {'BODY_TYPE': 'VITO?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurato... 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'MODEL_CODE': 'M447-fl2?internal_test=true', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f21438b2f90>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f21420d3930>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"\uD83C\uDF0D Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n                driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n                logging.info(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            # Attach the error to Allure\n            allure.attach(\"❌ Cookie banner not found or already accepted.\", name=\"Cookie Acceptance Error\", attachment_type=allure.attachment_type.TEXT)\n            # Add a custom defect category\n            allure.dynamic.label(\"defect\", \"Cookie Acceptance Failure\")\n            allure.dynamic.tag(\"Cookie Issue\")\n    \n            # Log the error\n            logging.error(\"❌ Failed to accept cookies.\")\n>           pytest.fail(\"Failed to accept cookies.\")\nE           Failed: Failed to accept cookies.\n\nQAAppAllure.py:166: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1747204086488,"stop":1747204086488,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: Failed to accept cookies.","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bec67e999f8db3cc36eea073b86c69e2\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'M447-fl2'\nmodel_name = 'MIXTO', body_type = 'VITO', attempt = 1\nurls = {'BODY_TYPE': 'VITO?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurato... 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'MODEL_CODE': 'M447-fl2?internal_test=true', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f21438b2f90>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f21420d3930>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"\uD83C\uDF0D Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n>               driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n\nQAAppAllure.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f21420d2cf0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Cannot read properties of ...\\\\n#17 0x55c7b8c835a6 \\\\u003Cunknown>\\\\n#18 0x7f221649caa4 \\\\u003Cunknown>\\\\n#19 0x7f2216529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'click')\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55c7b8c8475a <unknown>\nE       #1 0x55c7b87374b0 <unknown>\nE       #2 0x55c7b873e0b6 <unknown>\nE       #3 0x55c7b8740c07 <unknown>\nE       #4 0x55c7b87d561e <unknown>\nE       #5 0x55c7b87ae592 <unknown>\nE       #6 0x55c7b87d45e0 <unknown>\nE       #7 0x55c7b87ae363 <unknown>\nE       #8 0x55c7b877ad63 <unknown>\nE       #9 0x55c7b877b9c1 <unknown>\nE       #10 0x55c7b8c49a6b <unknown>\nE       #11 0x55c7b8c4d951 <unknown>\nE       #12 0x55c7b8c31b62 <unknown>\nE       #13 0x55c7b8c4e4c4 <unknown>\nE       #14 0x55c7b8c1613f <unknown>\nE       #15 0x55c7b8c726f8 <unknown>\nE       #16 0x55c7b8c728d6 <unknown>\nE       #17 0x55c7b8c835a6 <unknown>\nE       #18 0x7f221649caa4 <unknown>\nE       #19 0x7f2216529c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: JavascriptException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_case = {'body_type': 'VITO', 'market_code': 'DE/de', 'model_code': 'M447-fl2', 'model_name': 'MIXTO', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:335: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bec67e999f8db3cc36eea073b86c69e2\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'M447-fl2'\nmodel_name = 'MIXTO', body_type = 'VITO', attempt = 1\nurls = {'BODY_TYPE': 'VITO?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurato... 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'MODEL_CODE': 'M447-fl2?internal_test=true', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f21438b2f90>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f21420d3930>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            with allure.step(f\"\uD83C\uDF0D Navigating to HOME_PAGE: {urls['HOME_PAGE']}\"):\n                driver.get(urls['HOME_PAGE'])\n                WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n                logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            with allure.step(\"✅ Detecting and accepting cookies\"):\n                WebDriverWait(driver, 6).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n                )\n                time.sleep(2)\n                logging.info(\"✅ Cookie banner detected.\")\n                driver.execute_script(\"\"\"\n                    document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n                \"\"\")\n                logging.info(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            # Attach the error to Allure\n            allure.attach(\"❌ Cookie banner not found or already accepted.\", name=\"Cookie Acceptance Error\", attachment_type=allure.attachment_type.TEXT)\n            # Add a custom defect category\n            allure.dynamic.label(\"defect\", \"Cookie Acceptance Failure\")\n            allure.dynamic.tag(\"Cookie Issue\")\n    \n            # Log the error\n            logging.error(\"❌ Failed to accept cookies.\")\n>           pytest.fail(\"Failed to accept cookies.\")\nE           Failed: Failed to accept cookies.\n\nQAAppAllure.py:166: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1747204087458,"stop":1747204087511,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1747204087511,"stop":1747204087518,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.de/vans?internal_test=true","time":{"start":1747204087519,"stop":1747204092562,"duration":5043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1747204092562,"stop":1747204094702,"duration":2140},"status":"broken","statusMessage":"selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'click')\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55c7b8c8475a <unknown>\n#1 0x55c7b87374b0 <unknown>\n#2 0x55c7b873e0b6 <unknown>\n#3 0x55c7b8740c07 <unknown>\n#4 0x55c7b87d561e <unknown>\n#5 0x55c7b87ae592 <unknown>\n#6 0x55c7b87d45e0 <unknown>\n#7 0x55c7b87ae363 <unknown>\n#8 0x55c7b877ad63 <unknown>\n#9 0x55c7b877b9c1 <unknown>\n#10 0x55c7b8c49a6b <unknown>\n#11 0x55c7b8c4d951 <unknown>\n#12 0x55c7b8c31b62 <unknown>\n#13 0x55c7b8c4e4c4 <unknown>\n#14 0x55c7b8c1613f <unknown>\n#15 0x55c7b8c726f8 <unknown>\n#16 0x55c7b8c728d6 <unknown>\n#17 0x55c7b8c835a6 <unknown>\n#18 0x7f221649caa4 <unknown>\n#19 0x7f2216529c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/QAAppAllure.py\", line 153, in run_test\n    driver.execute_script(\"\"\"\n    ~~~~~~~~~~~~~~~~~~~~~^^^^\n        document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    \"\"\")\n    ^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 528, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3540b2255118f073","name":"URLs for MIXTO (VITO)","source":"3540b2255118f073.json","type":"application/json","size":838},{"uid":"8d22a52a77eff116","name":"Cookie Acceptance Error","source":"8d22a52a77eff116.txt","type":"text/plain","size":48},{"uid":"4ca0e9f88f254c91","name":"log","source":"4ca0e9f88f254c91.txt","type":"text/plain","size":10099}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"52c6ec0e2aaa754bfcb7ffa74c228803"},{"name":"parentSuite","value":"DE/de"},{"name":"suite","value":"BFV1"},{"name":"subSuite","value":"M447-fl2 - MIXTO (VITO)"},{"name":"tag","value":"BFV1"},{"name":"tag","value":"DE/de"},{"name":"tag","value":"M447-fl2"},{"name":"tag","value":"VITO"},{"name":"tag","value":"MIXTO"},{"name":"defect","value":"Cookie Acceptance Failure"},{"name":"tag","value":"Cookie Issue"},{"name":"host","value":"pkrvmberfyhpb9w"},{"name":"thread","value":"2369-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV1', 'market_code': 'DE/de', 'model_code': 'M447-fl2', 'model_name': 'MIXTO', 'body_type': 'VITO', 'urls': {'MODEL_CODE': 'M447-fl2?internal_test=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.de/vans/models/vito/mixto/overview.html?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurator.html#/de_de?models=VITO&bodyTypes=MIXTO?internal_test=true', 'ONLINE_SHOP': 'https://www.mercedes-benz.de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-commercial-vans/brand-Mercedes-Benz/modelIdentifier-VITO/?emhsortType=price-asc&emhbodyType=MIXTO?internal_test=true', 'TEST_DRIVE': 'https://www.mercedes-benz.de/vans/online-testdrive.html#/dealer?context=OWVANS&modelSeries=M447-fl2&modelType=ALL?internal_test=true', 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'BODY_TYPE': 'VITO?internal_test=true', 'MODEL_NAME': 'MIXTO?internal_test=true'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["BFV1","DE/de","VITO","MIXTO","Cookie Issue","M447-fl2"]},"source":"564919d8ced0bb24.json","parameterValues":["{'test_name': 'BFV1', 'market_code': 'DE/de', 'model_code': 'M447-fl2', 'model_name': 'MIXTO', 'body_type': 'VITO', 'urls': {'MODEL_CODE': 'M447-fl2?internal_test=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.de/vans/models/vito/mixto/overview.html?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.de/vans/buy/van-online-configurator.html#/de_de?models=VITO&bodyTypes=MIXTO?internal_test=true', 'ONLINE_SHOP': 'https://www.mercedes-benz.de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-commercial-vans/brand-Mercedes-Benz/modelIdentifier-VITO/?emhsortType=price-asc&emhbodyType=MIXTO?internal_test=true', 'TEST_DRIVE': 'https://www.mercedes-benz.de/vans/online-testdrive.html#/dealer?context=OWVANS&modelSeries=M447-fl2&modelType=ALL?internal_test=true', 'HOME_PAGE': 'https://www.mercedes-benz.de/vans?internal_test=true', 'BODY_TYPE': 'VITO?internal_test=true', 'MODEL_NAME': 'MIXTO?internal_test=true'}}"]}