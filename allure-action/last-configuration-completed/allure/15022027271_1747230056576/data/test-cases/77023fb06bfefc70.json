{"uid":"77023fb06bfefc70","name":"test_run[test_case13]","fullName":"QAAppAllure#test_run","historyId":"f582980dcc8b2b82fac5cd5117295f2b","time":{"start":1747229756228,"stop":1747229785546,"duration":29318},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'SPRINTER', 'market_code': 'AT/de', 'model_code': 'C907-P02', 'model_name': 'CAB-CHASSIS-PLATFORM', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca617ea8c9b5498ac39cb088618a378c\")>\ntest_name = 'Last Configuration Completed', model_name = 'CAB-CHASSIS-PLATFORM'\nbody_type = 'SPRINTER', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f60fc0e2d50>\nurls = {'BODY_TYPE': 'SPRINTER?usecaselivetest=true', 'CONFIGURATOR': 'https://www.mercedes-benz.at/vans/buy/van-online-confi...ME_PAGE': 'https://www.mercedes-benz.at/vans?usecaselivetest=true', 'MODEL_CODE': 'C907-P02?usecaselivetest=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:63: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1747229756227,"stop":1747229756227,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'SPRINTER', 'market_code': 'AT/de', 'model_code': 'C907-P02', 'model_name': 'CAB-CHASSIS-PLATFORM', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca617ea8c9b5498ac39cb088618a378c\")>\ntest_name = 'Last Configuration Completed', model_name = 'CAB-CHASSIS-PLATFORM'\nbody_type = 'SPRINTER', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f60fc0e2d50>\nurls = {'BODY_TYPE': 'SPRINTER?usecaselivetest=true', 'CONFIGURATOR': 'https://www.mercedes-benz.at/vans/buy/van-online-confi...ME_PAGE': 'https://www.mercedes-benz.at/vans?usecaselivetest=true', 'MODEL_CODE': 'C907-P02?usecaselivetest=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:63: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1747229756701,"stop":1747229756735,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1747229756735,"stop":1747229756739,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.at/vans?usecaselivetest=true","time":{"start":1747229756739,"stop":1747229758767,"duration":2028},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1747229758767,"stop":1747229761125,"duration":2358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform Last Configuration Completed Logic","time":{"start":1747229761125,"stop":1747229780746,"duration":19621},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/vans/buy/van-online-configurator.html#/at_de?models=SPRINTER_NEW&bodyTypes=FLATBED_SINGLE?usecaselivetest=true","time":{"start":1747229761125,"stop":1747229766985,"duration":5860},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1747229766985,"stop":1747229777964,"duration":10979},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.at/vans?usecaselivetest=true","time":{"start":1747229777964,"stop":1747229780746,"duration":2782},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1747229784748,"stop":1747229785477,"duration":729},"status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 63, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Setting campaign name substring for test: Last Configuration Completed","time":{"start":1747229784748,"stop":1747229784749,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8f39e05a143bbd68","name":"Info","source":"8f39e05a143bbd68.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1747229784749,"stop":1747229785466,"duration":717},"status":"passed","steps":[],"attachments":[{"uid":"28a51a0b4fbce469","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_austria_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UgLSBWYW5zIiwiaXRlbUFjdGlvbiI6bnVsbCwic291cmNlIjp7InBhZ2VUeXBlIjoiaG9tZV92YW5zIiwibG9jYWxlIjoiZGVfQVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmF0L3ZhbnMuaHRtbD91c2VjYXNlbGl2ZXRlc3Q9dHJ1ZSIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNzIifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjIwNzk4NjUwOTUuMTc0NzIyOTc2MSJ9LCJhbm9uSWQiOiJkZWM5ZWVlODExOGI3OTQ4In0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiNTc4NjQzNDgwODU2NzA5NSJ9","source":"28a51a0b4fbce469.json","type":"application/json","size":2059}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"❌ Campaign 'last-configuration | vans commercial models | home | simple-teaser and campaign-module' is in the Control Group. Retrying test.","time":{"start":1747229785476,"stop":1747229785476,"duration":0},"status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Completed' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 63, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"811615febe22943b","name":"URLs for CAB-CHASSIS-PLATFORM (SPRINTER)","source":"811615febe22943b.json","type":"application/json","size":562},{"uid":"3c2f3bf3daed51b4","name":"log","source":"3c2f3bf3daed51b4.txt","type":"text/plain","size":19657}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"stepsCount":12,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"fdd89b1a883ac862263b1b111f843a64"},{"name":"parentSuite","value":"AT/de"},{"name":"suite","value":"Last Configuration Completed"},{"name":"subSuite","value":"C907-P02 - CAB-CHASSIS-PLATFORM (SPRINTER)"},{"name":"tag","value":"Last Configuration Completed"},{"name":"tag","value":"AT/de"},{"name":"tag","value":"C907-P02"},{"name":"tag","value":"SPRINTER"},{"name":"tag","value":"CAB-CHASSIS-PLATFORM"},{"name":"host","value":"pkrvmberfyhpb9w"},{"name":"thread","value":"2408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Configuration Completed', 'market_code': 'AT/de', 'model_code': 'C907-P02', 'model_name': 'CAB-CHASSIS-PLATFORM', 'body_type': 'SPRINTER', 'urls': {'MODEL_CODE': 'C907-P02?usecaselivetest=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/vans/models/sprinter/cab-chassis-platform/overview.html?usecaselivetest=true', 'CONFIGURATOR': 'https://www.mercedes-benz.at/vans/buy/van-online-configurator.html#/at_de?models=SPRINTER_NEW&bodyTypes=FLATBED_SINGLE?usecaselivetest=true', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.at/vans?usecaselivetest=true', 'BODY_TYPE': 'SPRINTER?usecaselivetest=true', 'MODEL_NAME': 'CAB-CHASSIS-PLATFORM?usecaselivetest=true'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["C907-P02","AT/de","Last Configuration Completed","SPRINTER","CAB-CHASSIS-PLATFORM"]},"source":"77023fb06bfefc70.json","parameterValues":["{'test_name': 'Last Configuration Completed', 'market_code': 'AT/de', 'model_code': 'C907-P02', 'model_name': 'CAB-CHASSIS-PLATFORM', 'body_type': 'SPRINTER', 'urls': {'MODEL_CODE': 'C907-P02?usecaselivetest=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/vans/models/sprinter/cab-chassis-platform/overview.html?usecaselivetest=true', 'CONFIGURATOR': 'https://www.mercedes-benz.at/vans/buy/van-online-configurator.html#/at_de?models=SPRINTER_NEW&bodyTypes=FLATBED_SINGLE?usecaselivetest=true', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.at/vans?usecaselivetest=true', 'BODY_TYPE': 'SPRINTER?usecaselivetest=true', 'MODEL_NAME': 'CAB-CHASSIS-PLATFORM?usecaselivetest=true'}}"]}