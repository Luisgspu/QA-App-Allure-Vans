{"uid":"83b087296d92b46d","name":"test_run[test_case4]","fullName":"QAAppAllure#test_run","historyId":"0d3edff6a7f620eaceda7f21adc4f5e9","time":{"start":1747645869669,"stop":1747645901173,"duration":31504},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'VAN', 'market_code': 'IT/it', 'model_code': 'E420', 'model_name': 'EQT', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af86c98d80f6958b337d63e31348ae3e\")>\ntest_name = 'BFV2', model_name = 'EQT', body_type = 'VAN', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f4b80b183e0>\nurls = {'BODY_TYPE': 'VAN', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models...I&fuelTypes=E', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'MODEL_CODE': 'E420', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:64: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1747645869669,"stop":1747645869669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'VAN', 'market_code': 'IT/it', 'model_code': 'E420', 'model_name': 'EQT', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af86c98d80f6958b337d63e31348ae3e\")>\ntest_name = 'BFV2', model_name = 'EQT', body_type = 'VAN', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f4b80b183e0>\nurls = {'BODY_TYPE': 'VAN', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models...I&fuelTypes=E', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'MODEL_CODE': 'E420', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:64: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1747645870270,"stop":1747645870350,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1747645870350,"stop":1747645870352,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ","time":{"start":1747645870352,"stop":1747645874119,"duration":3767},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1747645874119,"stop":1747645876512,"duration":2393},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Perform BFV2 Test Logic","time":{"start":1747645876512,"stop":1747645896428,"duration":19916},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.it/passengercars/models/van/eqt/overview.html","time":{"start":1747645876512,"stop":1747645886880,"duration":10368},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=EQT&bodyTypes=COMBI&fuelTypes=E","time":{"start":1747645886880,"stop":1747645893335,"duration":6455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1747645893335,"stop":1747645893426,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating back to: https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ","time":{"start":1747645893427,"stop":1747645896428,"duration":3001},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":4,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1747645900429,"stop":1747645901099,"duration":670},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 64, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Setting campaign name substring for test: BFV2","time":{"start":1747645900429,"stop":1747645900429,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"105d409d53c38a22","name":"Info","source":"105d409d53c38a22.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1747645900429,"stop":1747645901087,"duration":658},"status":"passed","steps":[],"attachments":[{"uid":"2ec4be6f2ec38906","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_italy_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UgLSBWYW5zIiwiaXRlbUFjdGlvbiI6bnVsbCwic291cmNlIjp7InBhZ2VUeXBlIjoiaG9tZV92YW5zIiwibG9jYWxlIjoiaXRfSVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56Lml0L3ZhbnM%2FZXZlcmdhZ2VUZXN0TWVzc2FnZXM9R0NLelEiLCJ1cmxSZWZlcnJlciI6IiIsImNoYW5uZWwiOiJXZWIiLCJiZWFjb25WZXJzaW9uIjoxNiwiY29uZmlnVmVyc2lvbiI6IjY0In0sImZsYWdzIjp7InBhZ2VWaWV3Ijp0cnVlfSwidXNlciI6eyJhdHRyaWJ1dGVzIjp7ImdhQ2xpZW50SUQiOiI0MDE1MDc3NzUuMTc0NzY0NTg3NyJ9LCJhbm9uSWQiOiI3YjBjYmE2YjA3Y2FiZTZjIn0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsidGVzdE1lc3NhZ2VzIjoiR0NLelEiLCJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI3NTIxOTY3ODU4MTQwNDM0In0%3D","source":"2ec4be6f2ec38906.json","type":"application/json","size":2958}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"❌ Campaign 'vans best-fitting-vehicle | all vans models | home | simple-teaser, campaign-module and stage' is in the Control Group. Retrying test.","time":{"start":1747645901099,"stop":1747645901099,"duration":0},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 64, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"hasContent":true,"stepsCount":3,"attachmentStep":false}],"attachments":[{"uid":"a8c664403b513206","name":"URLs for EQT (VAN)","source":"a8c664403b513206.json","type":"application/json","size":779},{"uid":"ca7f96e9dfd55949","name":"log","source":"ca7f96e9dfd55949.txt","type":"text/plain","size":27912}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"stepsCount":13,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"e72c39b07c4398b886d03515211b3e18"},{"name":"parentSuite","value":"IT/it"},{"name":"suite","value":"BFV2"},{"name":"subSuite","value":"E420 - EQT (VAN)"},{"name":"tag","value":"BFV2"},{"name":"tag","value":"IT/it"},{"name":"tag","value":"E420"},{"name":"tag","value":"VAN"},{"name":"tag","value":"EQT"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2447-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV2', 'market_code': 'IT/it', 'model_code': 'E420', 'model_name': 'EQT', 'body_type': 'VAN', 'urls': {'MODEL_CODE': 'E420', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/van/eqt/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=EQT&bodyTypes=COMBI&fuelTypes=E', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-EQT_CLASS/?emhsortType=price-asc&emhbodyType=PEOPLE_CARRIER&emhfuelType=ELECTRIC', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=E420&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'BODY_TYPE': 'VAN', 'MODEL_NAME': 'EQT'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["VAN","IT/it","EQT","E420","BFV2"]},"source":"83b087296d92b46d.json","parameterValues":["{'test_name': 'BFV2', 'market_code': 'IT/it', 'model_code': 'E420', 'model_name': 'EQT', 'body_type': 'VAN', 'urls': {'MODEL_CODE': 'E420', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/van/eqt/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=EQT&bodyTypes=COMBI&fuelTypes=E', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-EQT_CLASS/?emhsortType=price-asc&emhbodyType=PEOPLE_CARRIER&emhfuelType=ELECTRIC', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=E420&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'BODY_TYPE': 'VAN', 'MODEL_NAME': 'EQT'}}"]}