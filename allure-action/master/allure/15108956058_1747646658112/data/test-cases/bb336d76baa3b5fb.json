{"uid":"bb336d76baa3b5fb","name":"test_run[test_case33]","fullName":"QAAppAllure#test_run","historyId":"d822755222b2c5817fe2cab237e5ec51","time":{"start":1747646492286,"stop":1747646525175,"duration":32889},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'VAN', 'market_code': 'IT/it', 'model_code': 'V447-fl2', 'model_name': 'V-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76aad7a09df68e4ef9a29317a36006db\")>\ntest_name = 'BFV3', model_name = 'V-CLASS', body_type = 'VAN', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f1431e751d0>\nurls = {'BODY_TYPE': 'VAN', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models...pes=COMBI', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'MODEL_CODE': 'V447-fl2', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:64: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1747646492286,"stop":1747646492286,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'VAN', 'market_code': 'IT/it', 'model_code': 'V447-fl2', 'model_name': 'V-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76aad7a09df68e4ef9a29317a36006db\")>\ntest_name = 'BFV3', model_name = 'V-CLASS', body_type = 'VAN', retries = 1\nscreenshot_dir = '/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f1431e751d0>\nurls = {'BODY_TYPE': 'VAN', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models...pes=COMBI', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'MODEL_CODE': 'V447-fl2', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:64: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1747646492730,"stop":1747646492842,"duration":112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1747646492842,"stop":1747646492845,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ","time":{"start":1747646492845,"stop":1747646497500,"duration":4655},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1747646497500,"stop":1747646500531,"duration":3031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Perform BFV3 Test Logic","time":{"start":1747646500532,"stop":1747646519236,"duration":18704},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.it/passengercars/models/van/v-class/overview.html","time":{"start":1747646500532,"stop":1747646511130,"duration":10598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=VCLASS&bodyTypes=COMBI","time":{"start":1747646511130,"stop":1747646517282,"duration":6152},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1747646517282,"stop":1747646517335,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ","time":{"start":1747646517335,"stop":1747646519236,"duration":1901},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":4,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1747646523239,"stop":1747646524070,"duration":831},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 64, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Setting campaign name substring for test: BFV3","time":{"start":1747646523239,"stop":1747646523239,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"82a7dda27de97204","name":"Info","source":"82a7dda27de97204.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1747646523240,"stop":1747646524060,"duration":820},"status":"passed","steps":[],"attachments":[{"uid":"959faa5416fe8bcf","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_italy_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UgLSBWYW5zIiwiaXRlbUFjdGlvbiI6bnVsbCwic291cmNlIjp7InBhZ2VUeXBlIjoiaG9tZV92YW5zIiwibG9jYWxlIjoiaXRfSVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56Lml0L3ZhbnM%2FZXZlcmdhZ2VUZXN0TWVzc2FnZXM9R0NLelEiLCJ1cmxSZWZlcnJlciI6IiIsImNoYW5uZWwiOiJXZWIiLCJiZWFjb25WZXJzaW9uIjoxNiwiY29uZmlnVmVyc2lvbiI6IjY0In0sImZsYWdzIjp7InBhZ2VWaWV3Ijp0cnVlfSwidXNlciI6eyJhdHRyaWJ1dGVzIjp7ImdhQ2xpZW50SUQiOiIxODkyODA3MTczLjE3NDc2NDY1MDEifSwiYW5vbklkIjoiYmMwNjE4MzE2ZjMzMDU2YyJ9LCJwZXJmb3JtYW5jZSI6e30sImRlYnVnIjp7InRlc3RNZXNzYWdlcyI6IkdDS3pRIiwiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMTExODA2ODcwMDU3NjQwNjcifQ%3D%3D","source":"959faa5416fe8bcf.json","type":"application/json","size":2964}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"❌ Campaign 'vans best-fitting-vehicle | all vans models | home | simple-teaser, campaign-module and stage' is in the Control Group. Retrying test.","time":{"start":1747646524069,"stop":1747646524070,"duration":1},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure-Vans/QA-App-Allure-Vans/App/VerifyPersonalizationAndCapture.py\", line 64, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-iXZ6MjYB-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"hasContent":true,"stepsCount":3,"attachmentStep":false}],"attachments":[{"uid":"20649b5dee7ab76","name":"URLs for V-CLASS (VAN)","source":"20649b5dee7ab76.json","type":"application/json","size":763},{"uid":"f78ef43f73744d40","name":"log","source":"f78ef43f73744d40.txt","type":"text/plain","size":51311}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"stepsCount":13,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"0f37b1b9f2b05fa6019dcc2a796d2122"},{"name":"parentSuite","value":"IT/it"},{"name":"suite","value":"BFV3"},{"name":"subSuite","value":"V447-fl2 - V-CLASS (VAN)"},{"name":"tag","value":"BFV3"},{"name":"tag","value":"IT/it"},{"name":"tag","value":"V447-fl2"},{"name":"tag","value":"VAN"},{"name":"tag","value":"V-CLASS"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2453-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV3', 'market_code': 'IT/it', 'model_code': 'V447-fl2', 'model_name': 'V-CLASS', 'body_type': 'VAN', 'urls': {'MODEL_CODE': 'V447-fl2', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/van/v-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=VCLASS&bodyTypes=COMBI', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-V_CLASS/?emhsortType=price-asc&emhbodyType=PEOPLE_CARRIER', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V447-fl2&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'BODY_TYPE': 'VAN', 'MODEL_NAME': 'V-CLASS'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"397787e7145dbf71","status":"failed","statusDetails":"Failed: ❌ Test 'BFV3' failed due to image verification error: Message:","time":{"start":1747646444696,"stop":1747646492241,"duration":47545}},{"uid":"c759a709e2c2d4c","status":"failed","statusDetails":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.","time":{"start":1747646411845,"stop":1747646444666,"duration":32821}},{"uid":"72116d83342189b4","status":"failed","statusDetails":"Failed: ❌ Test 'BFV3' failed due to image verification error: Message:","time":{"start":1747646369048,"stop":1747646411805,"duration":42757}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["V447-fl2","VAN","IT/it","V-CLASS","BFV3"]},"source":"bb336d76baa3b5fb.json","parameterValues":["{'test_name': 'BFV3', 'market_code': 'IT/it', 'model_code': 'V447-fl2', 'model_name': 'V-CLASS', 'body_type': 'VAN', 'urls': {'MODEL_CODE': 'V447-fl2', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/van/v-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/vans/buy/van-online-configurator.html#/it_it?models=VCLASS&bodyTypes=COMBI', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-V_CLASS/?emhsortType=price-asc&emhbodyType=PEOPLE_CARRIER', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V447-fl2&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/vans?evergageTestMessages=GCKzQ', 'BODY_TYPE': 'VAN', 'MODEL_NAME': 'V-CLASS'}}"]}